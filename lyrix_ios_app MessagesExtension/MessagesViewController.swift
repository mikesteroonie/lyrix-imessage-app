//
//  MessagesViewController.swift
//  lyrix_ios_app MessagesExtension
//
//  Created by Michael Kim on 3/15/24.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    var customTabBarController: UITabBarController = UITabBarController()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupTabBarController()
    }
    
    func setupTabBarController() {
        // Initialize the tab bar controller
        customTabBarController = UITabBarController()
        
        // Create instances of your view controllers
        let createVC = CreateViewController()
        let createNavController = UINavigationController(rootViewController: createVC)
        
        createNavController.tabBarItem = UITabBarItem(title: "Create", image: nil, selectedImage: nil)
        // Now `createNavController` can be added to your tab bar controller or presented directly
        
        let aboutVC = AboutViewController() // A simple UIViewController subclass
        aboutVC.tabBarItem = UITabBarItem(title: "About", image: nil, selectedImage: nil)
        
        // Assign view controllers to the tab bar controller
        customTabBarController.viewControllers = [createNavController, aboutVC]
        
        // Add the tab bar controller to the current view controller
        addChild(customTabBarController)
        customTabBarController.view.frame = view.bounds
        view.addSubview(customTabBarController.view)
        customTabBarController.didMove(toParent: self)
    }
    
  
    //---------------
    // MARK: - Conversation Handling

    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        
        
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dismisses the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
            
        // note: only fired when blue button is pressed.
        //after 10 messages certain special features are unlocked
        
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
}

    
//---------------
// MARK: Custom Animation Between Screens

